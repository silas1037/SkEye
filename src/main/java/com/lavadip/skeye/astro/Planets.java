package com.lavadip.skeye.astro;

import com.lavadip.skeye.AstroUtil;
import java.util.Date;

final class Planets {
    public static final int B_BI = 4;
    public static final int B_ND = 0;
    public static final int B_NF = 3;
    public static final int B_NM = 1;
    public static final int B_NM1 = 2;
    private static final double EARTH_EQ_RADIUS_KM = 6378.137d;
    public static final int LR_LI = 4;
    public static final int LR_ND = 0;
    public static final int LR_NF = 3;
    public static final int LR_NM = 1;
    public static final int LR_NM1 = 2;
    public static final int LR_RI = 5;
    public static final int MOON_INDEX = 1;
    public static final int NUM_PLANETS = 9;
    static final double RADS = 0.017453292519943295d;
    public static final int SUN_INDEX = 0;
    private static final double TWO_PI = 6.283185307179586d;
    public static int[] bData = null;
    public static final int bRowSize = 5;
    public static final int[] lrData;
    public static final int lrRowSize = 6;

    /* renamed from: d */
    private final double f30d;
    private final double ecl = Math.toRadians(23.4393d - (3.563E-7d * this.f30d));
    private final Date forDate;
    private final double lmst;
    private final PlanetInfo sunInfo = new PlanetInfo(0.0d, 0.0d, Math.toRadians(282.9404d + (4.70935E-5d * this.f30d)), 1.0d, 0.016709d - (1.151E-9d * this.f30d), Math.toRadians(356.047d + (0.9856002585d * this.f30d)), this.f30d, this.ecl);
    private final float userLatitude;

    static {
        int[] iArr = new int[360];
        iArr[2] = 1;
        iArr[4] = 6288774;
        iArr[5] = -20905355;
        iArr[6] = 2;
        iArr[8] = -1;
        iArr[10] = 1274027;
        iArr[11] = -3699111;
        iArr[12] = 2;
        iArr[16] = 658314;
        iArr[17] = -2955968;
        iArr[20] = 2;
        iArr[22] = 213618;
        iArr[23] = -569925;
        iArr[25] = 1;
        iArr[28] = -185116;
        iArr[29] = 48888;
        iArr[33] = 2;
        iArr[34] = -114332;
        iArr[35] = -3149;
        iArr[36] = 2;
        iArr[38] = -2;
        iArr[40] = 58793;
        iArr[41] = 246158;
        iArr[42] = 2;
        iArr[43] = -1;
        iArr[44] = -1;
        iArr[46] = 57066;
        iArr[47] = -152138;
        iArr[48] = 2;
        iArr[50] = 1;
        iArr[52] = 53322;
        iArr[53] = -170733;
        iArr[54] = 2;
        iArr[55] = -1;
        iArr[58] = 45758;
        iArr[59] = -204586;
        iArr[61] = 1;
        iArr[62] = -1;
        iArr[64] = -40923;
        iArr[65] = -129620;
        iArr[66] = 1;
        iArr[70] = -34720;
        iArr[71] = 108743;
        iArr[73] = 1;
        iArr[74] = 1;
        iArr[76] = -30383;
        iArr[77] = 104755;
        iArr[78] = 2;
        iArr[81] = -2;
        iArr[82] = 15327;
        iArr[83] = 10321;
        iArr[86] = 1;
        iArr[87] = 2;
        iArr[88] = -12528;
        iArr[92] = 1;
        iArr[93] = -2;
        iArr[94] = 10980;
        iArr[95] = 79661;
        iArr[96] = 4;
        iArr[98] = -1;
        iArr[100] = 10675;
        iArr[101] = -34782;
        iArr[104] = 3;
        iArr[106] = 10034;
        iArr[107] = -23210;
        iArr[108] = 4;
        iArr[110] = -2;
        iArr[112] = 8548;
        iArr[113] = -21636;
        iArr[114] = 2;
        iArr[115] = 1;
        iArr[116] = -1;
        iArr[118] = -7888;
        iArr[119] = 24208;
        iArr[120] = 2;
        iArr[121] = 1;
        iArr[124] = -6766;
        iArr[125] = 30824;
        iArr[126] = 1;
        iArr[128] = -1;
        iArr[130] = -5163;
        iArr[131] = -8379;
        iArr[132] = 1;
        iArr[133] = 1;
        iArr[136] = 4987;
        iArr[137] = -16675;
        iArr[138] = 2;
        iArr[139] = -1;
        iArr[140] = 1;
        iArr[142] = 4036;
        iArr[143] = -12831;
        iArr[144] = 2;
        iArr[146] = 2;
        iArr[148] = 3994;
        iArr[149] = -10445;
        iArr[150] = 4;
        iArr[154] = 3861;
        iArr[155] = -11650;
        iArr[156] = 2;
        iArr[158] = -3;
        iArr[160] = 3665;
        iArr[161] = 14403;
        iArr[163] = 1;
        iArr[164] = -2;
        iArr[166] = -2689;
        iArr[167] = -7003;
        iArr[168] = 2;
        iArr[170] = -1;
        iArr[171] = 2;
        iArr[172] = -2602;
        iArr[174] = 2;
        iArr[175] = -1;
        iArr[176] = -2;
        iArr[178] = 2390;
        iArr[179] = 10056;
        iArr[180] = 1;
        iArr[182] = 1;
        iArr[184] = -2348;
        iArr[185] = 6322;
        iArr[186] = 2;
        iArr[187] = -2;
        iArr[190] = 2236;
        iArr[191] = -9884;
        iArr[193] = 1;
        iArr[194] = 2;
        iArr[196] = -2120;
        iArr[197] = 5751;
        iArr[199] = 2;
        iArr[202] = -2069;
        iArr[204] = 2;
        iArr[205] = -2;
        iArr[206] = -1;
        iArr[208] = 2048;
        iArr[209] = -4950;
        iArr[210] = 2;
        iArr[212] = 1;
        iArr[213] = -2;
        iArr[214] = -1773;
        iArr[215] = 4130;
        iArr[216] = 2;
        iArr[219] = 2;
        iArr[220] = -1595;
        iArr[222] = 4;
        iArr[223] = -1;
        iArr[224] = -1;
        iArr[226] = 1215;
        iArr[227] = -3958;
        iArr[230] = 2;
        iArr[231] = 2;
        iArr[232] = -1110;
        iArr[234] = 3;
        iArr[236] = -1;
        iArr[238] = -892;
        iArr[239] = 3258;
        iArr[240] = 2;
        iArr[241] = 1;
        iArr[242] = 1;
        iArr[244] = -810;
        iArr[245] = 2616;
        iArr[246] = 4;
        iArr[247] = -1;
        iArr[248] = -2;
        iArr[250] = 759;
        iArr[251] = -1897;
        iArr[253] = 2;
        iArr[254] = -1;
        iArr[256] = -713;
        iArr[257] = -2117;
        iArr[258] = 2;
        iArr[259] = 2;
        iArr[260] = -1;
        iArr[262] = -700;
        iArr[263] = 2354;
        iArr[264] = 2;
        iArr[265] = 1;
        iArr[266] = -2;
        iArr[268] = 691;
        iArr[270] = 2;
        iArr[271] = -1;
        iArr[273] = -2;
        iArr[274] = 596;
        iArr[276] = 4;
        iArr[278] = 1;
        iArr[280] = 549;
        iArr[281] = -1423;
        iArr[284] = 4;
        iArr[286] = 537;
        iArr[287] = -1117;
        iArr[288] = 4;
        iArr[289] = -1;
        iArr[292] = 520;
        iArr[293] = -1571;
        iArr[294] = 1;
        iArr[296] = -2;
        iArr[298] = -487;
        iArr[299] = -1739;
        iArr[300] = 2;
        iArr[301] = 1;
        iArr[303] = -2;
        iArr[304] = -399;
        iArr[308] = 2;
        iArr[309] = -2;
        iArr[310] = -381;
        iArr[311] = -4421;
        iArr[312] = 1;
        iArr[313] = 1;
        iArr[314] = 1;
        iArr[316] = 351;
        iArr[318] = 3;
        iArr[320] = -2;
        iArr[322] = -340;
        iArr[324] = 4;
        iArr[326] = -3;
        iArr[328] = 330;
        iArr[330] = 2;
        iArr[331] = -1;
        iArr[332] = 2;
        iArr[334] = 327;
        iArr[337] = 2;
        iArr[338] = 1;
        iArr[340] = -323;
        iArr[341] = 1165;
        iArr[342] = 1;
        iArr[343] = 1;
        iArr[344] = -1;
        iArr[346] = 299;
        iArr[348] = 2;
        iArr[350] = 3;
        iArr[352] = 294;
        iArr[354] = 2;
        iArr[356] = -1;
        iArr[357] = -2;
        iArr[359] = 8752;
        lrData = iArr;
        int[] iArr2 = new int[300];
        iArr2[3] = 1;
        iArr2[4] = 5128122;
        iArr2[7] = 1;
        iArr2[8] = 1;
        iArr2[9] = 280602;
        iArr2[12] = 1;
        iArr2[13] = -1;
        iArr2[14] = 277693;
        iArr2[15] = 2;
        iArr2[18] = -1;
        iArr2[19] = 173237;
        iArr2[20] = 2;
        iArr2[22] = -1;
        iArr2[23] = 1;
        iArr2[24] = 55413;
        iArr2[25] = 2;
        iArr2[27] = -1;
        iArr2[28] = -1;
        iArr2[29] = 46271;
        iArr2[30] = 2;
        iArr2[33] = 1;
        iArr2[34] = 32573;
        iArr2[37] = 2;
        iArr2[38] = 1;
        iArr2[39] = 17198;
        iArr2[40] = 2;
        iArr2[42] = 1;
        iArr2[43] = -1;
        iArr2[44] = 9266;
        iArr2[47] = 2;
        iArr2[48] = -1;
        iArr2[49] = 8822;
        iArr2[50] = 2;
        iArr2[51] = -1;
        iArr2[53] = -1;
        iArr2[54] = 8216;
        iArr2[55] = 2;
        iArr2[57] = -2;
        iArr2[58] = -1;
        iArr2[59] = 4324;
        iArr2[60] = 2;
        iArr2[62] = 1;
        iArr2[63] = 1;
        iArr2[64] = 4200;
        iArr2[65] = 2;
        iArr2[66] = 1;
        iArr2[68] = -1;
        iArr2[69] = -3359;
        iArr2[70] = 2;
        iArr2[71] = -1;
        iArr2[72] = -1;
        iArr2[73] = 1;
        iArr2[74] = 2463;
        iArr2[75] = 2;
        iArr2[76] = -1;
        iArr2[78] = 1;
        iArr2[79] = 2211;
        iArr2[80] = 2;
        iArr2[81] = -1;
        iArr2[82] = -1;
        iArr2[83] = -1;
        iArr2[84] = 2065;
        iArr2[86] = 1;
        iArr2[87] = -1;
        iArr2[88] = -1;
        iArr2[89] = -1870;
        iArr2[90] = 4;
        iArr2[92] = -1;
        iArr2[93] = -1;
        iArr2[94] = 1828;
        iArr2[96] = 1;
        iArr2[98] = 1;
        iArr2[99] = -1794;
        iArr2[103] = 3;
        iArr2[104] = -1749;
        iArr2[106] = 1;
        iArr2[107] = -1;
        iArr2[108] = 1;
        iArr2[109] = -1565;
        iArr2[110] = 1;
        iArr2[113] = 1;
        iArr2[114] = -1491;
        iArr2[116] = 1;
        iArr2[117] = 1;
        iArr2[118] = 1;
        iArr2[119] = -1475;
        iArr2[121] = 1;
        iArr2[122] = 1;
        iArr2[123] = -1;
        iArr2[124] = -1410;
        iArr2[126] = 1;
        iArr2[128] = -1;
        iArr2[129] = -1344;
        iArr2[130] = 1;
        iArr2[133] = -1;
        iArr2[134] = -1335;
        iArr2[137] = 3;
        iArr2[138] = 1;
        iArr2[139] = 1107;
        iArr2[140] = 4;
        iArr2[143] = -1;
        iArr2[144] = 1021;
        iArr2[145] = 4;
        iArr2[147] = -1;
        iArr2[148] = 1;
        iArr2[149] = 833;
        iArr2[152] = 1;
        iArr2[153] = -3;
        iArr2[154] = 777;
        iArr2[155] = 4;
        iArr2[157] = -2;
        iArr2[158] = 1;
        iArr2[159] = 671;
        iArr2[160] = 2;
        iArr2[163] = -3;
        iArr2[164] = 607;
        iArr2[165] = 2;
        iArr2[167] = 2;
        iArr2[168] = -1;
        iArr2[169] = 596;
        iArr2[170] = 2;
        iArr2[171] = -1;
        iArr2[172] = 1;
        iArr2[173] = -1;
        iArr2[174] = 491;
        iArr2[175] = 2;
        iArr2[177] = -2;
        iArr2[178] = 1;
        iArr2[179] = -451;
        iArr2[182] = 3;
        iArr2[183] = -1;
        iArr2[184] = 439;
        iArr2[185] = 2;
        iArr2[187] = 2;
        iArr2[188] = 1;
        iArr2[189] = 422;
        iArr2[190] = 2;
        iArr2[192] = -3;
        iArr2[193] = -1;
        iArr2[194] = 421;
        iArr2[195] = 2;
        iArr2[196] = 1;
        iArr2[197] = -1;
        iArr2[198] = 1;
        iArr2[199] = -366;
        iArr2[200] = 2;
        iArr2[201] = 1;
        iArr2[203] = 1;
        iArr2[204] = -351;
        iArr2[205] = 4;
        iArr2[208] = 1;
        iArr2[209] = 331;
        iArr2[210] = 2;
        iArr2[211] = -1;
        iArr2[212] = 1;
        iArr2[213] = 1;
        iArr2[214] = 315;
        iArr2[215] = 2;
        iArr2[216] = -2;
        iArr2[218] = -1;
        iArr2[219] = 302;
        iArr2[222] = 1;
        iArr2[223] = 3;
        iArr2[224] = -283;
        iArr2[225] = 2;
        iArr2[226] = 1;
        iArr2[227] = 1;
        iArr2[228] = -1;
        iArr2[229] = -229;
        iArr2[230] = 1;
        iArr2[231] = 1;
        iArr2[233] = -1;
        iArr2[234] = 223;
        iArr2[235] = 1;
        iArr2[236] = 1;
        iArr2[238] = 1;
        iArr2[239] = 223;
        iArr2[241] = 1;
        iArr2[242] = -2;
        iArr2[243] = -1;
        iArr2[244] = -220;
        iArr2[245] = 2;
        iArr2[246] = 1;
        iArr2[247] = -1;
        iArr2[248] = -1;
        iArr2[249] = -220;
        iArr2[250] = 1;
        iArr2[252] = 1;
        iArr2[253] = 1;
        iArr2[254] = -185;
        iArr2[255] = 2;
        iArr2[256] = -1;
        iArr2[257] = -2;
        iArr2[258] = -1;
        iArr2[259] = 181;
        iArr2[261] = 1;
        iArr2[262] = 2;
        iArr2[263] = 1;
        iArr2[264] = -177;
        iArr2[265] = 4;
        iArr2[267] = -2;
        iArr2[268] = -1;
        iArr2[269] = 176;
        iArr2[270] = 4;
        iArr2[271] = -1;
        iArr2[272] = -1;
        iArr2[273] = -1;
        iArr2[274] = 166;
        iArr2[275] = 1;
        iArr2[277] = 1;
        iArr2[278] = -1;
        iArr2[279] = -164;
        iArr2[280] = 4;
        iArr2[282] = 1;
        iArr2[283] = -1;
        iArr2[284] = 132;
        iArr2[285] = 1;
        iArr2[287] = -1;
        iArr2[288] = -1;
        iArr2[289] = -119;
        iArr2[290] = 4;
        iArr2[291] = -1;
        iArr2[293] = -1;
        iArr2[294] = 115;
        iArr2[295] = 2;
        iArr2[296] = -2;
        iArr2[298] = 1;
        iArr2[299] = 107;
        bData = iArr2;
    }

    public Planets(Date forDate2, double lmst2, float userLatitude2) {
        this.forDate = forDate2;
        this.lmst = lmst2;
        this.userLatitude = userLatitude2;
        this.f30d = localJDayNum(forDate2);
    }

    private static double localJulianDate(Date date) {
        return localJDayNum(date) - 1.5d;
    }

    private static double[] moonPosition(Date localDate, double lst, double geoLat) {
        double topoDec;
        double T = localJulianDate(localDate) / 36525.0d;
        double Et = (1.0d - (0.002516d * T)) - ((7.4E-6d * T) * T);
        double L = RADS * ((((218.3164591d + (481267.88134236d * T)) - ((0.0013268d * T) * T)) + (((T * T) * T) / 538841.0d)) - ((((T * T) * T) * T) / 6.5194E7d));
        double D = RADS * ((((297.8502042d + (445267.1115168d * T)) - ((0.00163d * T) * T)) + (((T * T) * T) / 545868.0d)) - ((((T * T) * T) * T) / 1.13065E8d));
        double M = RADS * (((357.5291092d + (35999.0502909d * T)) - ((1.536E-4d * T) * T)) + (((T * T) * T) / 2.449E7d));
        double M1 = RADS * ((((134.9634114d + (477198.8676313d * T)) + ((0.008997d * T) * T)) + (((T * T) * T) / 69699.0d)) - ((((T * T) * T) * T) / 1.4712E7d));
        double F = RADS * ((((93.2720993d + (483202.0175273d * T)) - ((0.0034029d * T) * T)) - (((T * T) * T) / 3526000.0d)) + ((((T * T) * T) * T) / 8.6331E8d));
        double A1 = RADS * (119.75d + (131.849d * T));
        double A2 = RADS * (53.09d + (479264.29d * T));
        double A3 = RADS * (313.45d + (481226.484d * T));
        double sumL = 0.0d;
        double sumR = 0.0d;
        for (int i = 0; i < lrData.length / 6; i++) {
            int mlrd = i * 6;
            double E = 1.0d;
            int nm = lrData[mlrd + 1];
            int nm1 = lrData[mlrd + 2];
            int nf = lrData[mlrd + 3];
            int nd = lrData[mlrd + 0];
            int Li = lrData[mlrd + 4];
            int Ri = lrData[mlrd + 5];
            if (nm != 0) {
                E = Et;
                if (Math.abs(nm) == 2) {
                    E *= E;
                }
            }
            sumL += ((double) Li) * E * Math.sin((((double) nd) * D) + (((double) nm) * M) + (((double) nm1) * M1) + (((double) nf) * F));
            sumR += ((double) Ri) * E * Math.cos((((double) nd) * D) + (((double) nm) * M) + (((double) nm1) * M1) + (((double) nf) * F));
        }
        double sumB = 0.0d;
        for (int i2 = 0; i2 < bData.length / 5; i2++) {
            int mbd = i2 * 5;
            double E2 = 1.0d;
            int nm2 = bData[mbd + 1];
            int nm12 = bData[mbd + 2];
            int nd2 = bData[mbd + 0];
            int nf2 = bData[mbd + 3];
            int Bi = bData[mbd + 4];
            if (nm2 != 0) {
                E2 = Et;
                if (Math.abs(nm2) == 2) {
                    E2 *= E2;
                }
            }
            sumB += ((double) Bi) * E2 * Math.sin((((double) nd2) * D) + (((double) nm2) * M) + (((double) nm12) * M1) + (((double) nf2) * F));
        }
        double[] equatorial = eclipticToEquatorial(((RADS * (sumL + (((3958.0d * Math.sin(A1)) + (1962.0d * Math.sin(L - F))) + (318.0d * Math.sin(A2))))) / 1000000.0d) + L, (RADS * (sumB + ((((((-2235.0d * Math.sin(L)) + (382.0d * Math.sin(A3))) + (175.0d * Math.sin(A1 - F))) + (175.0d * Math.sin(A1 + F))) + (127.0d * Math.sin(L - M1))) - (115.0d * Math.sin(L + M1))))) / 1000000.0d, T);
        double eqRA = equatorial[0] % 6.283185307179586d;
        double eqDec = equatorial[1] % 6.283185307179586d;
        double mPar = Math.asin(1.0d / ((385000.56d + (sumR / 1000.0d)) / 6378.137d));
        double rho = 0.99833d + (0.00167d * Math.cos(2.0d * geoLat));
        double moonHa = lst - eqRA;
        double auxAng = Math.atan2(Math.tan(geoLat), Math.cos(moonHa));
        double topoRA = eqRA - ((((mPar * rho) * Math.cos(geoLat)) * Math.sin(moonHa)) / Math.cos(eqDec));
        if (auxAng == 0.0d) {
            topoDec = eqDec - (((mPar * rho) * Math.sin(eqDec)) * Math.cos(moonHa));
        } else {
            topoDec = eqDec - ((((mPar * rho) * Math.sin(geoLat)) * Math.sin(auxAng - eqDec)) / Math.sin(auxAng));
        }
        return new double[]{AstroUtil.makeAnglePositive(topoRA), topoDec};
    }

    private static double[] eclipticToEquatorial(double longitude, double latitude, double julianCentury) {
        double U = julianCentury / 100.0d;
        double obliquity = RADS * (23.43929111d + (((((((((((-4680.93d * U) - ((1.55d * U) * U)) + (((1999.25d * U) * U) * U)) - ((((51.38d * U) * U) * U) * U)) - (((((249.67d * U) * U) * U) * U) * U)) - ((((((39.05d * U) * U) * U) * U) * U) * U)) + (((((((7.12d * U) * U) * U) * U) * U) * U) * U)) + ((((((((27.87d * U) * U) * U) * U) * U) * U) * U) * U)) + (((((((((5.79d * U) * U) * U) * U) * U) * U) * U) * U) * U)) + ((((((((((2.45d * U) * U) * U) * U) * U) * U) * U) * U) * U) * U)) / 3600.0d));
        double xEcl = Math.cos(longitude) * Math.cos(latitude);
        double yEcl = Math.sin(longitude) * Math.cos(latitude);
        double zEcl = Math.sin(latitude);
        return new double[]{Math.atan2((Math.cos(obliquity) * yEcl) - (Math.sin(obliquity) * zEcl), xEcl), Math.asin((Math.sin(obliquity) * yEcl) + (Math.cos(obliquity) * zEcl))};
    }

    public static double localJDayNum(Date localDate) {
        int m = localDate.getMonth() + 1;
        int y = localDate.getYear() + 1900;
        return ((double) (((((y * 367) - (((((m + 9) / 12) + y) * 7) / 4)) + ((m * 275) / 9)) + localDate.getDate()) - 730530)) + ((((double) localDate.getHours()) + (((double) (localDate.getMinutes() + localDate.getTimezoneOffset())) / 60.0d)) / 24.0d);
    }

    private static void storeInArray(double[] srcPositions, double[] destPositions, int dstIndex) {
        destPositions[dstIndex] = srcPositions[0];
        destPositions[dstIndex + 1] = srcPositions[1];
    }

    public double[] getSunPosition() {
        return this.sunInfo.getSunPosition();
    }

    public double[] getPlanetPositions() {
        double[] positions = new double[18];
        storeInArray(this.sunInfo.getSunPosition(), positions, 0);
        storeInArray(moonPosition(this.forDate, this.lmst, (double) this.userLatitude), positions, 2);
        PlanetInfo mercury = new PlanetInfo(Math.toRadians(48.3313d + (3.24587E-5d * this.f30d)), Math.toRadians(7.0047d + (5.0E-8d * this.f30d)), Math.toRadians(29.1241d + (1.01444E-5d * this.f30d)), 0.387098d, 0.205635d + (5.59E-10d * this.f30d), Math.toRadians(168.6562d + (4.0923344368d * this.f30d)), this.f30d, this.ecl);
        PlanetInfo venus = new PlanetInfo(Math.toRadians(76.6799d + (2.4659E-5d * this.f30d)), Math.toRadians(3.3946d + (2.75E-8d * this.f30d)), Math.toRadians(54.891d + (1.38374E-5d * this.f30d)), 0.72333d, 0.006773d - (1.302E-9d * this.f30d), Math.toRadians(48.0052d + (1.6021302244d * this.f30d)), this.f30d, this.ecl);
        PlanetInfo mars = new PlanetInfo(Math.toRadians(49.5574d + (2.11081E-5d * this.f30d)), Math.toRadians(1.8497d - (1.78E-8d * this.f30d)), Math.toRadians(286.5016d + (2.92961E-5d * this.f30d)), 1.523688d, 0.093405d + (2.516E-9d * this.f30d), Math.toRadians(18.6021d + (0.5240207766d * this.f30d)), this.f30d, this.ecl);
        PlanetInfo jupiter = new PlanetInfo(Math.toRadians(100.4542d + (2.76854E-5d * this.f30d)), Math.toRadians(1.303d - (1.557E-7d * this.f30d)), Math.toRadians(273.8777d + (1.64505E-5d * this.f30d)), 5.20256d, 0.048498d + (4.469E-9d * this.f30d), Math.toRadians(19.895d + (0.0830853001d * this.f30d)), this.f30d, this.ecl);
        PlanetInfo saturn = new PlanetInfo(Math.toRadians(113.6634d + (2.3898E-5d * this.f30d)), Math.toRadians(2.4886d - (1.081E-7d * this.f30d)), Math.toRadians(339.3939d + (2.97661E-5d * this.f30d)), 9.55475d, 0.055546d - (9.499E-9d * this.f30d), Math.toRadians(316.967d + (0.0334442282d * this.f30d)), this.f30d, this.ecl);
        PlanetInfo uranus = new PlanetInfo(Math.toRadians(74.0005d + (1.3978E-5d * this.f30d)), Math.toRadians(0.7733d + (1.9E-8d * this.f30d)), Math.toRadians(96.6612d + (3.0565E-5d * this.f30d)), 19.18171d - (1.55E-8d * this.f30d), 0.047318d + (7.45E-9d * this.f30d), Math.toRadians(142.5905d + (0.011725806d * this.f30d)), this.f30d, this.ecl);
        PlanetInfo neptune = new PlanetInfo(Math.toRadians(131.7806d + (3.0173E-5d * this.f30d)), Math.toRadians(1.77d - (2.55E-7d * this.f30d)), Math.toRadians(272.8461d - (6.027E-6d * this.f30d)), 30.05826d + (3.313E-8d * this.f30d), 0.008606d + (2.15E-9d * this.f30d), Math.toRadians(260.2471d + (0.005995147d * this.f30d)), this.f30d, this.ecl);
        storeInArray(mercury.getPlanetEquatorialPos(this.sunInfo), positions, 4);
        storeInArray(venus.getPlanetEquatorialPos(this.sunInfo), positions, 6);
        storeInArray(mars.getPlanetEquatorialPos(this.sunInfo), positions, 8);
        jupiter.addPerturbationToJupiter(saturn);
        storeInArray(jupiter.getPlanetEquatorialPos(this.sunInfo), positions, 10);
        saturn.addPerturbationToSaturn(jupiter);
        storeInArray(saturn.getPlanetEquatorialPos(this.sunInfo), positions, 12);
        uranus.addPerturbationToUranus(saturn, jupiter);
        storeInArray(uranus.getPlanetEquatorialPos(this.sunInfo), positions, 14);
        storeInArray(neptune.getPlanetEquatorialPos(this.sunInfo), positions, 16);
        return positions;
    }
}
